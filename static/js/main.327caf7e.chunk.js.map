{"version":3,"sources":["Components/Titles/Titles.js","Components/Form/Form.js","Components/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","_","id","Form","props","className","type","onChange","handleCityChange","placeholder","handleCountryChange","onClick","getWeather","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","event","setState","target","value","console","log","e","a","preventDefault","fetch","api_call","json","data","name","sys","main","temp","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAYeA,G,MATA,SAAAC,GACb,OACE,yBAAKC,GAAG,aACN,wBAAIA,GAAG,SAAP,kBACA,wBAAIA,GAAG,eAAP,oDC0BSC,G,MA9BF,SAAAC,GACX,OACE,yBAAKF,GAAG,YACN,8BACE,yBAAKA,GAAG,aAAaG,UAAU,YAC7B,2BACEC,KAAK,OACLJ,GAAG,YACHK,SAAUH,EAAMI,iBAEhBC,YAAY,aAGhB,yBAAKP,GAAG,gBAAgBG,UAAU,YAChC,2BACEC,KAAK,OACLJ,GAAG,eACHK,SAAUH,EAAMM,oBAEhBD,YAAY,gBAGhB,4BAAQP,GAAG,qBAAqBG,UAAU,mBAAmBM,QAASP,EAAMQ,YAA5E,mBCiBOC,G,MAvCC,SAAAT,GACd,OACE,yBAAKF,GAAG,eACLE,EAAMU,MAAQV,EAAMW,SACnB,uBAAGb,GAAG,YAEHE,EAAMU,KAFT,KAEiBV,EAAMW,SAMxBX,EAAMY,aACL,uBAAGd,GAAG,eAAN,eAEE,8BAAOE,EAAMY,YAAb,WAGHZ,EAAMa,UACL,uBAAGf,GAAG,YAAN,YAEE,8BAAOE,EAAMa,SAAb,MAGHb,EAAMc,aACL,uBAAGhB,GAAG,aAAN,cAEE,8BAAOE,EAAMc,cAGhBd,EAAMe,OACL,2BACE,8BAAOf,EAAMe,WC7BjBC,G,MAAU,oCAqFDC,E,2MAlFbC,MAAQ,CACNR,KAAM,GACNC,QAAS,GACTE,cAAUM,EACVP,iBAAaO,EACbL,iBAAaK,EACbJ,WAAOI,G,EAITf,iBAAmB,SAAAgB,GACjB,EAAKC,SAAS,CACZX,KAAMU,EAAME,OAAOC,QAErBC,QAAQC,IAAI,EAAKP,MAAMR,O,EAIzBJ,oBAAsB,SAAAc,GACpB,EAAKC,SAAS,CACZV,QAASS,EAAME,OAAOC,QAExBC,QAAQC,IAAI,EAAKP,MAAMP,U,EAIzBH,W,uCAAa,WAAMkB,GAAN,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIlB,EAAO,EAAKQ,MAAMR,KAClBC,EAAU,EAAKO,MAAMP,QAJhB,SAKYkB,MAAM,oDAAD,OAC0BnB,EAD1B,YACkCC,EADlC,kBACmDK,EADnD,oBALjB,cAKLc,EALK,gBAWQA,EAASC,OAXjB,OAWLC,EAXK,OAYXR,QAAQC,IAAIO,GAERtB,GAAQC,EACV,EAAKU,SAAS,CACZX,KAAMsB,EAAKC,KACXtB,QAASqB,EAAKE,IAAIvB,QAClBC,YAAaoB,EAAKG,KAAKC,KACvBvB,SAAUmB,EAAKG,KAAKtB,SACpBC,YAAakB,EAAKK,QAAQ,GAAGvB,YAC7BC,MAAO,KAGT,EAAKM,SAAS,CACZN,MAAO,+BAzBA,4C,8HA+BX,OACE,oCACE,yBAAKjB,GAAG,sBACN,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEU,WAAY8B,KAAK9B,WACjBJ,iBAAkBkC,KAAKlC,iBACvBE,oBAAqBgC,KAAKhC,sBAI5B,kBAAC,EAAD,CACEM,YAAa0B,KAAKpB,MAAMN,YACxBC,SAAUyB,KAAKpB,MAAML,SACrBC,YAAawB,KAAKpB,MAAMJ,YACxBJ,KAAM4B,KAAKpB,MAAMR,KACjBC,QAAS2B,KAAKpB,MAAMP,QACpBI,MAAOuB,KAAKpB,MAAMH,c,GA3EZwB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.327caf7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Titles.css\";\r\n\r\nconst Titles = _ => {\r\n  return (\r\n    <div id='title_div'>\r\n      <h1 id=\"title\">Weather Finder</h1>\r\n      <h3 id=\"description\">Find out before you travel or leave the house</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\nimport './Form.css'\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div id='form_div'>\r\n      <form>\r\n        <div id='city_input' className=\"ui input\">\r\n          <input\r\n            type=\"text\"\r\n            id='city_text'\r\n            onChange={props.handleCityChange}\r\n            // value={props.city}\r\n            placeholder=\"City...\"\r\n          />\r\n        </div>\r\n        <div id='country_input' className=\"ui input\">\r\n          <input\r\n            type=\"text\"\r\n            id='country_text'\r\n            onChange={props.handleCountryChange}\r\n            // value={props.country}\r\n            placeholder=\"Country...\"\r\n          />\r\n        </div>\r\n        <button id='get_weather_button' className=\"ui yellow button\" onClick={props.getWeather}>\r\n          Get Weather\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Weather.css\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div id=\"weather_div\">\r\n      {props.city && props.country && (\r\n        <p id='location'>\r\n          {/* Location: */}\r\n          {props.city}, {props.country}\r\n          {/* <span>\r\n            {props.city}, {props.country}\r\n          </span> */}\r\n        </p>\r\n      )}\r\n      {props.temperature && (\r\n        <p id='temperature'>\r\n          Temperature:\r\n          <span>{props.temperature} Â°F</span>\r\n        </p>\r\n      )}\r\n      {props.humidity && (\r\n        <p id='humidity'>\r\n          Humidity:\r\n          <span>{props.humidity}%</span>\r\n        </p>\r\n      )}\r\n      {props.description && (\r\n        <p id='condition'>\r\n          Conditions:\r\n          <span>{props.description}</span>\r\n        </p>\r\n      )}\r\n      {props.error && (\r\n        <p>\r\n          <span>{props.error}</span>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Titles from \"./Components/Titles\";\r\nimport Form from \"./Components/Form\";\r\nimport Weather from \"./Components/Weather\";\r\nimport \"./App.css\";\r\n\r\nconst API_KEY = \"1440f5491a8209d364a356f4beea4365\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    city: \"\",\r\n    country: \"\",\r\n    humidity: undefined,\r\n    temperature: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  };\r\n\r\n  // handles input change for City\r\n  handleCityChange = event => {\r\n    this.setState({\r\n      city: event.target.value\r\n    });\r\n    console.log(this.state.city);\r\n  };\r\n\r\n  // handles input change for Country\r\n  handleCountryChange = event => {\r\n    this.setState({\r\n      country: event.target.value\r\n    });\r\n    console.log(this.state.country);\r\n  };\r\n\r\n  // function to get weather data\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n\r\n    const city = this.state.city;\r\n    const country = this.state.country;\r\n    const api_call = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`\r\n    );\r\n\r\n    // convert response to JSON format: JavaScript Object Notation\r\n    // converts data to readable format\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n    // city and both country need to be entered in order for info to pop out\r\n    if (city && country) {\r\n      this.setState({\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        temperature: data.main.temp,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        error: \"Please input a valid value\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"weather_finder_div\">\r\n          <Titles />\r\n          <Form\r\n            getWeather={this.getWeather}\r\n            handleCityChange={this.handleCityChange}\r\n            handleCountryChange={this.handleCountryChange}\r\n          />\r\n          {/* //   city={this.state.city}\r\n        //   country={this.state.country} */}\r\n          <Weather\r\n            temperature={this.state.temperature}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            error={this.state.error}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}